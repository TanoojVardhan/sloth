"use client"

import React, { useState } from "react"
import { Card, CardContent, CardHeader, CardTitle } from "@/components/ui/card"
import { Progress } from "@/components/ui/progress"
import { cn } from "@/lib/utils"
import { Button } from "@/components/ui/button"
import { Plus, Loader2 } from "lucide-react"
import { Dialog, DialogContent, DialogFooter, DialogHeader, DialogTitle } from "@/components/ui/dialog"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Label } from "@/components/ui/label"
import { useToast } from "@/hooks/use-toast"
import { useAuth } from "@/contexts/auth-context"

type Goal = {
  id: string
  title: string
  description?: string
  status: "active" | "completed" | "archived"
  targetDate?: Date
  progress?: number
  category?: string
  // ...add other fields as needed
}

interface GoalTrackerProps {
  goals?: Goal[]
}

export default function GoalTracker({ goals: initialGoals = [] }: GoalTrackerProps) {
  const [goals, setGoals] = useState<Goal[]>(initialGoals)
  const [isDialogOpen, setIsDialogOpen] = useState(false)
  const [isSubmitting, setIsSubmitting] = useState(false)
  const { toast } = useToast()
  const { user } = useAuth()
  
  // Form state
  const [newGoal, setNewGoal] = useState({
    title: "",
    description: "",
    status: "active",
    targetDate: "",
    category: "",
    progress: 0
  })
  
  const handleCreateGoal = async () => {
    if (!user) {
      toast({
        title: "Error",
        description: "You must be logged in to create goals",
        variant: "destructive",
      })
      return
    }
    
    if (!newGoal.title.trim()) {
      toast({
        title: "Error",
        description: "Goal title is required",
        variant: "destructive",
      })
      return
    }
    
    setIsSubmitting(true)
    
    try {
      // In a real implementation, this would call a service function to save to the database
      // For now, we'll just simulate creating a goal locally
      const createdGoal: Goal = {
        id: Date.now().toString(), // In a real app, this would be generated by the database
        title: newGoal.title,
        description: newGoal.description || undefined,
        status: "active",
        targetDate: newGoal.targetDate ? new Date(newGoal.targetDate) : undefined,
        progress: 0,
        category: newGoal.category || undefined
      }
      
      // Add the new goal to the list
      setGoals(prevGoals => [...prevGoals, createdGoal])
      
      // Show success message
      toast({
        title: "Goal created",
        description: "Your goal has been created successfully",
      })
      
      // Reset form and close dialog
      setNewGoal({
        title: "",
        description: "",
        status: "active",
        targetDate: "",
        category: "",
        progress: 0
      })
      setIsDialogOpen(false)
    } catch (error) {
      console.error("Error creating goal:", error)
      toast({
        title: "Error",
        description: "Failed to create goal. Please try again.",
        variant: "destructive",
      })
    } finally {
      setIsSubmitting(false)
    }
  }
  
  return (
    <>
      <Card>
        <CardHeader className="flex flex-row items-center justify-between">
          <CardTitle>Goals</CardTitle>
          <Button size="sm" onClick={() => setIsDialogOpen(true)} className="bg-primary hover:bg-primary/90">
            <Plus className="h-4 w-4 mr-1" /> Add Goal
          </Button>
        </CardHeader>
        <CardContent>
          <div className="grid gap-4 md:grid-cols-2">
            {goals.length === 0 ? (
              <Card className="border shadow-sm col-span-2">
                <CardContent className="p-4 flex flex-col items-center justify-center py-10 text-center">
                  <div className="rounded-full bg-primary/10 p-3 mb-4">
                    <svg
                      xmlns="http://www.w3.org/2000/svg"
                      width="24"
                      height="24"
                      viewBox="0 0 24 24"
                      fill="none"
                      stroke="currentColor"
                      strokeWidth="2"
                      strokeLinecap="round"
                      strokeLinejoin="round"
                      className="text-primary"
                    >
                      <circle cx="12" cy="12" r="10" />
                      <path d="m9 12 2 2 4-4" />
                    </svg>
                  </div>
                  <h3 className="font-medium text-lg mb-2">No Goals Yet</h3>
                  <p className="text-sm text-muted-foreground max-w-sm">
                    Create your first goal to start tracking your progress. Goals help you stay focused and motivated.
                  </p>
                  <Button 
                    className="mt-4 bg-primary hover:bg-primary/90" 
                    onClick={() => setIsDialogOpen(true)}
                  >
                    <Plus className="h-4 w-4 mr-2" /> Create Your First Goal
                  </Button>
                </CardContent>
              </Card>
            ) : (
              goals.map((goal) => (
                <Card key={goal.id} className={cn(
                  "border shadow-sm",
                  goal.status === "completed" && "bg-green-50 border-green-200",
                  goal.status === "archived" && "bg-gray-50 border-gray-200"
                )}>
                  <CardContent className="p-4">
                    <div className="flex items-center justify-between mb-2">
                      <h3 className="font-medium">{goal.title}</h3>
                      <span className={cn(
                        "text-xs px-2 py-1 rounded-full",
                        goal.status === "active" && "bg-blue-100 text-blue-800",
                        goal.status === "completed" && "bg-green-100 text-green-800",
                        goal.status === "archived" && "bg-gray-100 text-gray-800"
                      )}>
                        {goal.status.charAt(0).toUpperCase() + goal.status.slice(1)}
                      </span>
                    </div>
                    {goal.description && (
                      <p className="text-sm text-muted-foreground mb-2">{goal.description}</p>
                    )}
                    {goal.targetDate && (
                      <div className="text-xs text-muted-foreground mb-2">
                        Target: {new Date(goal.targetDate).toLocaleDateString()}
                      </div>
                    )}
                    {goal.status === "active" && (
                      <Progress value={goal.progress || 0} className="h-1.5 mt-2" />
                    )}
                  </CardContent>
                </Card>
              ))
            )}
          </div>
        </CardContent>
      </Card>
      
      {/* Create Goal Dialog */}
      <Dialog open={isDialogOpen} onOpenChange={setIsDialogOpen}>
        <DialogContent>
          <DialogHeader>
            <DialogTitle>Create New Goal</DialogTitle>
          </DialogHeader>
          <div className="space-y-4 py-4">
            <div className="space-y-2">
              <Label htmlFor="title">Title</Label>
              <Input
                id="title"
                placeholder="Goal Title"
                value={newGoal.title}
                onChange={(e) => setNewGoal({ ...newGoal, title: e.target.value })}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="description">Description</Label>
              <Textarea
                id="description"
                placeholder="Goal Description"
                value={newGoal.description}
                onChange={(e) => setNewGoal({ ...newGoal, description: e.target.value })}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="category">Category</Label>
              <Input
                id="category"
                placeholder="Category (e.g. Personal, Work, Health)"
                value={newGoal.category}
                onChange={(e) => setNewGoal({ ...newGoal, category: e.target.value })}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="targetDate">Target Date</Label>
              <Input
                id="targetDate"
                type="date"
                value={newGoal.targetDate}
                onChange={(e) => setNewGoal({ ...newGoal, targetDate: e.target.value })}
              />
            </div>
            
            <div className="space-y-2">
              <Label htmlFor="status">Status</Label>
              <Select 
                value={newGoal.status} 
                onValueChange={(value) => setNewGoal({ ...newGoal, status: value as "active" | "completed" | "archived" })}
              >
                <SelectTrigger id="status">
                  <SelectValue placeholder="Select status" />
                </SelectTrigger>
                <SelectContent>
                  <SelectItem value="active">Active</SelectItem>
                  <SelectItem value="completed">Completed</SelectItem>
                  <SelectItem value="archived">Archived</SelectItem>
                </SelectContent>
              </Select>
            </div>
          </div>
          <DialogFooter>
            <Button variant="outline" onClick={() => setIsDialogOpen(false)} disabled={isSubmitting}>
              Cancel
            </Button>
            <Button onClick={handleCreateGoal} disabled={isSubmitting}>
              {isSubmitting ? (
                <>
                  <Loader2 className="h-4 w-4 mr-2 animate-spin" />
                  Creating...
                </>
              ) : (
                "Create Goal"
              )}
            </Button>
          </DialogFooter>
        </DialogContent>
      </Dialog>
    </>
  )
}
